#if (${PackageName} && ${PackageName} != "")
package ${PackageName};

#end

import android.app.Activity;
import android.app.Instrumentation;

import android.support.test.espresso.Espresso;
import android.support.test.espresso.NoActivityResumedException;
import ${EspressoPackageName}.espresso.ViewInteraction;
import ${EspressoPackageName}.espresso.intent.Intents;
import ${EspressoPackageName}.rule.ActivityTestRule;
import ${EspressoPackageName}.runner.AndroidJUnit4;
import android.test.suitebuilder.annotation.LargeTest;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;

import static ${EspressoPackageName}.InstrumentationRegistry.getInstrumentation;
import static ${EspressoPackageName}.espresso.Espresso.onView;
import static ${EspressoPackageName}.espresso.Espresso.onData;
import static ${EspressoPackageName}.espresso.Espresso.pressBack;
import static ${EspressoPackageName}.espresso.Espresso.openActionBarOverflowOrOptionsMenu;
#if (${AddContribImport})
import static ${EspressoPackageName}.espresso.contrib.RecyclerViewActions.actionOnItemAtPosition;
#end
import static ${EspressoPackageName}.espresso.action.ViewActions.*;
import static ${EspressoPackageName}.espresso.assertion.ViewAssertions.*;
import static ${EspressoPackageName}.espresso.intent.Intents.intending;
import static ${EspressoPackageName}.espresso.intent.matcher.IntentMatchers.isInternal;
import static ${EspressoPackageName}.espresso.matcher.ViewMatchers.*;

import ${ResourcePackageName}.R;

import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsInstanceOf;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.Before;
import org.junit.After;

import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.anything;

@LargeTest
@RunWith(AndroidJUnit4.class)
public class ${ClassName} {

    @Rule
    public ActivityTestRule<${TestActivityName}> mActivityTestRule = new ActivityTestRule<>(${TestActivityName}.class);

    @Test
    public void ${TestMethodName}() {
    #foreach (${line} in ${TestCode})
    ${line}
    #end
    }

    @Before
    public void setUp() {
        Intents.init();
        intending(not(isInternal()))
                .respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));
    }

    @After
    public void tearDown() {
        Intents.release();
        closeAllActivities();
    }

    private void closeAllActivities() {
        long startTime = System.currentTimeMillis();
        while (System.currentTimeMillis() - startTime < 30000) {
            try {
                Espresso.pressBack();
            } catch (NoActivityResumedException e) {
                break;
            }
        }
    }

    #if (${AddChildAtPositionMethod})
    private static Matcher<View> childAtPosition(
            final Matcher<View> parentMatcher, final int position) {

        return new TypeSafeMatcher<View>() {
            @Override
            public void describeTo(Description description) {
                description.appendText("Child at position " + position + " in parent ");
                parentMatcher.describeTo(description);
            }

            @Override
            public boolean matchesSafely(View view) {
                ViewParent parent = view.getParent();
                return parent instanceof ViewGroup && parentMatcher.matches(parent)
                        && view.equals(((ViewGroup)parent).getChildAt(position));
            }
        };
    }
    #end
}
